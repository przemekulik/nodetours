openapi: 3.0.1
info:
  title: NodeTours Sign-up API
  description: |-
    API for signing-up to NodeTours.
    The signing-up resources creates/updates/deletes a customer from SAGTours.
    Sign-up and Booking are protected via Basic Authentication.

    If an error occurs, the Sign-up API may give a text message as well as the HTTP response code.
  version: "3.2"
servers:
- url: http://nodetours:7777/
paths:
  /:
    get:
      summary: Get application info
      description: Shows version number and host information
      responses:
        200:
          description: Server running. Version and host info printed
          content:
            application/json:
              example:
                Application: NodeTours
                Version: 3.0.0
                Host: nodetours.com
                Port: '7777'
  /customers/{customerID}:
    parameters:
    - $ref: '#/components/parameters/customerID'
    get:
      summary: Get customer data
      description: Retrieves a customer's details
      operationId: getCustomer
      responses:
        200:
          description: Returns JSON representation of a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              example:
                customer:
                  firstname: Adam
                  surname: Apple
                  title: Mr.
                  emailAddress: adam.apple@email.com
                  passportID: '1320123456789'
                  passportExpiration: 2022.07.01
                  passportOrgin: USA
                  dob: 1992.09.01
                address:
                  street: 21 Jump St
                  city: New York
                  state: NY
                  zipcode: '23450'
                  country: USA
        400:
          description: 'Invalid or already existing customerID: <customerID>'
          content: {}
        401:
          description: Missing credentials or invalid credentials
          content: {}
    put:
      summary: Update customer data
      description: Update the customer's details
      operationId: updateCustomer
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        200:
          description: Successfully updated customers profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              example:
                customer:
                  firstname: Przemek
                  surname: Kulik
                  title: Mrs.
                  emailAddress: przemek.kulik@email.com
                  passportID: '1220123456789'
                  passportExpiration: 2022.07.01
                  passportOrgin: PL
                  dob: 1992.09.01
                address:
                  street: Ulica 7
                  city: Płońsk
                  state: MZ
                  zipcode: 09-100
                  country: PL
                _id: '5fa7119e39e5e00843589092'
        400:
          description: 'Invalid or already existing customerID: <customerID>'
          content: {}
        401:
          description: Missing credentials or invalid credentials
          content: {}
    delete:
      summary: Delete customer record
      description: Deletes the customer's account
      operationId: deleteCustomer
      responses:
        200:
          description: Successfully delete profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              example:
                customer:
                  firstname: Przemek
                  surname: Kulik
                  title: Mrs.
                  emailAddress: przemek.kulik@email.com
                  passportID: '1220123456789'
                  passportExpiration: 2022.07.01
                  passportOrgin: PL
                  dob: 1992.09.01
                address:
                  street: Ulica 7
                  city: Płońsk
                  state: MZ
                  zipcode: 09-100
                  country: PL
                _id: '5fa7119e39e5e00843589092'
        400:
          description: 'Invalid or already existing customerID: <customerID>'
          content: {}
        401:
          description: Missing credentials or invalid credentials
          content: {}
  /customers:
    get:
      summary: Get all customers' data
      description: Retrieves a customers' details
      operationId: GET all customers
      responses:
        200:
          description: Returns JSON representation of all customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              example:
              - customer:
                  firstname: Oleg
                  surname: Orange
                  title: Mr.
                  emailAddress: oleg.orange@email.com
                  passportID: '1220123456789'
                  passportExpiration: 2022.07.01
                  passportOrgin: USA
                  dob: 1992.09.01
                address:
                  street: 221B Baker St
                  city: London
                  state: null
                  zipcode: NW1 6XE
                  country: UK
              - customer:
                  firstname: Adam
                  surname: Apple
                  title: Nr.
                  emailAddress: adam.apple@email.com
                  passportID: '1320123456789'
                  passportExpiration: 2022.07.01
                  passportOrgin: USA
                  dob: 1992.09.01
                address:
                  street: 21 Jump St
                  city: New York
                  state: NY
                  zipcode: '23450'
                  country: US
        401:
          description: Missing credentials or invalid credentials
          content: {}
    post:
      summary: Create a new customer
      description: Sign up as a new customer
      operationId: createCustomer
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        201:
          description: Profile successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              example:
                customer:
                  firstname: Przemek
                  surname: Kulik
                  title: Mrs.
                  emailAddress: przemek.kulik@email.com
                  passportID: '1220123456789'
                  passportExpiration: 2022.07.01
                  passportOrgin: PL
                  dob: 1992.09.01
                address:
                  street: Ulica 7
                  city: Płońsk
                  state: MZ
                  zipcode: 09-100
                  country: PL
                _id: '5fa7119e39e5e00843589092'
          links:
            GetCustomerByID:
              $ref: '#/components/links/GetCustomerByID'
            UpdateUserByID:
              description: >
                The `emailAddress` value returned in the response can be used as
                the `CustomerID` parameter in calls to `/customers/{customerID}`.
              operationId: updateCustomer
              parameters:
                customerID: '$response.body#/customer.emailAddress'
            DeleteCustomerByID:
              $ref: '#/components/links/DeleteCustomerByID'
        400:
          description: 'Failed to create new customer account'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
components:
  parameters:
    customerID:
      in: path
      name: customerID
      description: ID of a customer
      schema:
        type: string
      example: "przemek.kulik@email.com"
      required: true
  schemas:
    Customer:
      type: object
      title: Customer
      description: Customer's personal and address data
      required: 
      - customer
      - address
      properties:
        customer:
            $ref: '#/components/schemas/PersonalDetails'
        address:
            $ref: '#/components/schemas/Address'
        _id:
          title: Internal ID
          type: string
          example: "5fa7119e39e5e00843589092"
      additionalProperties: false
    PersonalDetails:
      type: object
      title: Personal data
      description: Customer's personal data
      required: 
      - firstname
      - surname
      - title
      - emailAddress
      - passportID
      - passportExpiration
      - passportOrigin
      - dob
      properties:
        firstname:
          type: string
          title: First name
          description: Cutomer's first name
          example: Adam
        surname:
          type: string
          title: Surname
          description: Cutomer's surname
          example: Apple
        title:
          type: string
          title: Tile
          description: Cutomer's title
          example: Mr.
        emailAddress:
          type: string
          title: Email address
          description: Cutomer's email address, also used as ID
          example: adam.apple@email.com
        passportID:
          type: string
          title: Passport ID
          description: Cutomer's passport ID
          example: "1320123456789"
        passportExpiration:
          type: string
          title: Passport expriration date
          description: Cutomer's passport expiration date
          example: 2022.07.01
        passportOrgin:
          type: string
          title: Passport origin
          description: Cutomer's passport country of origin
          example: USA
        dob:
          type: string
          title: Date of birth
          description: Cutomer's date of birth
          example: 1992.09.01
      additionalProperties: false
    Address:
      type: object
      title: Address
      description: Address information
      required:
      - street
      - city
      - state
      - zipcode
      - country
      properties:
        street:
          type: string
          title: Street
          example: "21 Jump St"
        city:
          type: string
          title: City
          example: "New York"
        state:
          type: string
          title: State
          example: "NY"
        zipcode:
          type: string
          title: ZIP Code
          example: "23450"
        country:
          type: string
          title: Country
          example: "USA"
      additionalProperties: false
    Error:
      type: object
      properties:
        code:
          type: string
          example: "ERR"
        message:
          type: string
          example: "Error occured"
      required:
        - code
        - message
  requestBodies:
    Customer:
      description: New customer request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
          example:
            customer:
              firstname: Przemek
              surname: Kulik
              title: Mrs.
              emailAddress: przemek.kulik@email.com
              passportID: '1220123456789'
              passportExpiration: 2022.07.01
              passportOrgin: PL
              dob: 1992.09.01
            address:
              street: Ulica 7
              city: Płońsk
              state: MZ
              zipcode: 09-100
              country: PL
  examples:
    Customer:
      summary: Sample customer record
      value: '{
                "customer": {
                  "firstname": "Adam",
                  "surname": "Apple",
                  "title": "Mr.",
                  "emailAddress": "adam.apple@email.com",
                  "passportID": "1320123456789",
                  "passportExpiration": "2022.07.01",
                  "passportOrgin": "USA",
                  "dob": "1992.09.01"
                },
                "address": {
                  "street": "21 Jump St",
                  "city": "New York",
                  "state": "NY",
                  "zipcode": "23450",
                  "country": "USA"
                }
              }'
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  links:
    GetCustomerByID:
      description: >
        The `emailAddress` value returned in the response can be used as
        the `CustomerID` parameter in calls to `/customers/{customerID}`.
      operationId: getCustomer
      parameters:
        customerID: '$response.body#/customer.emailAddress'
    DeleteCustomerByID:
      description: >
        The `emailAddress` value returned in the response can be used as
        the `CustomerID` parameter in calls to `/customers/{customerID}`.
      operationId: deleteCustomer
      parameters:
        customerID: '$response.body#/customer.emailAddress'